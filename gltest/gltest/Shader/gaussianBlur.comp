#version 430 core

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in; 

uniform blurKernel
{
	float weights[101];
}; 

layout (rgba32f) uniform readonly image2D src;
layout (rgba32f) uniform writeonly image2D dst;

shared float v[128+101]; // Variable shared with other threads in the 128x1 thread group

void main() {
	 int w = 7;

	 ivec2 gpos = ivec2(gl_GlobalInvocationID.xy); // Combo of groupID, groupSize and localID

	 uint i = gl_LocalInvocationID.x; // Local thread id in the 128x1 thread groups128x1

	 if (gpos.x >= w)
		 v[i] = imageLoad(src, gpos + ivec2(-w,0)).x;

	 if (i < 2 * w)
	 {
		v[i+128] = imageLoad(src, gpos + ivec2(128-w,0)).x;
	 }

	 barrier(); // Wait for all threads to catchup before reading v[]

	 float sum = 0.0;

	 for (int j = 0; j < 2*w+1; ++j)
	 {
		if (i + j >= w)
			sum = sum + weights[j] * v[i+j];
	 }

	 imageStore(dst, gpos, vec4(sum,sum,sum,sum)); // Write to destination image
}

